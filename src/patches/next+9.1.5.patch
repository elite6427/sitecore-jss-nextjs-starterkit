diff --git a/node_modules/next/dist/export/index.js b/node_modules/next/dist/export/index.js
index 3140cc9..6685473 100644
--- a/node_modules/next/dist/export/index.js
+++ b/node_modules/next/dist/export/index.js
@@ -15,6 +15,6 @@ const renderOpts={dir,buildId,nextExport:true,assetPrefix:nextConfig.assetPrefix
 route=>!exportPathMap[route].page.match(_constants.API_ROUTE));const hasApiRoutes=exportPaths.length!==filteredPaths.length;// Warn if the user defines a path for an API page
 if(hasApiRoutes){log(_chalk.default.yellow('  API pages are not supported by next export. https://err.sh/zeit/next.js/api-routes-static-export'));}const progress=!options.silent&&createProgress(filteredPaths.length);const sprDataDir=options.buildExport?outDir:(0,_path.join)(outDir,'_next/data',buildId);const ampValidations={};let hadValidationError=false;const publicDir=(0,_path.join)(dir,_constants2.CLIENT_PUBLIC_FILES_PATH);// Copy public directory
 if(!options.buildExport&&(0,_fs.existsSync)(publicDir)){log('  copying "public" directory');await(0,_recursiveCopy.recursiveCopy)(publicDir,outDir,{filter(path){// Exclude paths used by pages
-return!exportPathMap[path];}});}const worker=new _jestWorker.default(require.resolve('./worker'),{maxRetries:0,numWorkers:threads,enableWorkerThreads:nextConfig.experimental.workerThreads,exposedMethods:['default']});worker.getStdout().pipe(process.stdout);worker.getStderr().pipe(process.stderr);let renderError=false;await Promise.all(filteredPaths.map(async path=>{const result=await worker.default({path,pathMap:exportPathMap[path],distDir,buildId,outDir,sprDataDir,renderOpts,serverRuntimeConfig,subFolders,buildExport:options.buildExport,serverless:(0,_config.isTargetLikeServerless)(nextConfig.target)});for(const validation of result.ampValidations||[]){const{page,result}=validation;ampValidations[page]=result;hadValidationError=hadValidationError||Array.isArray(result&&result.errors)&&result.errors.length>0;}renderError=renderError||!!result.error;if(options.buildExport&&typeof result.fromBuildExportRevalidate!=='undefined'){configuration.initialPageRevalidationMap[path]=result.fromBuildExportRevalidate;}if(progress)progress();}));worker.end();// copy prerendered routes to outDir
+return!exportPathMap[path];}});}const worker=new _jestWorker.default(require.resolve('./worker'),{maxRetries:0,numWorkers:threads,enableWorkerThreads:nextConfig.experimental.workerThreads,exposedMethods:['default']});worker.getStdout().pipe(process.stdout);worker.getStderr().pipe(process.stderr);let renderError=false;await Promise.all(filteredPaths.map(async path=>{const result=await worker.default({path,pathMap:exportPathMap[path],distDir,buildId,outDir,sprDataDir,renderOpts,serverRuntimeConfig,subFolders,buildExport:options.buildExport,serverless:(0,_config.isTargetLikeServerless)(nextConfig.target),exportContextProviderModulePath: nextConfig.custom.exportContextProviderModulePath});for(const validation of result.ampValidations||[]){const{page,result}=validation;ampValidations[page]=result;hadValidationError=hadValidationError||Array.isArray(result&&result.errors)&&result.errors.length>0;}renderError=renderError||!!result.error;if(options.buildExport&&typeof result.fromBuildExportRevalidate!=='undefined'){configuration.initialPageRevalidationMap[path]=result.fromBuildExportRevalidate;}if(progress)progress();}));worker.end();// copy prerendered routes to outDir
 if(!options.buildExport&&prerenderManifest){await Promise.all(Object.keys(prerenderManifest.routes).map(async route=>{route=route==='/'?'/index':route;const orig=(0,_path.join)(distPagesDir,route);const htmlDest=(0,_path.join)(outDir,`${route}${subFolders&&route!=='/index'?`${_path.sep}index`:''}.html`);const jsonDest=(0,_path.join)(sprDataDir,`${route}.json`);await mkdirp((0,_path.dirname)(htmlDest));await mkdirp((0,_path.dirname)(jsonDest));await copyFile(`${orig}.html`,htmlDest);await copyFile(`${orig}.json`,jsonDest);}));}if(Object.keys(ampValidations).length){console.log((0,_index.formatAmpMessages)(ampValidations));}if(hadValidationError){throw new Error(`AMP Validation caused the export to fail. https://err.sh/zeit/next.js/amp-export-validation`);}if(renderError){throw new Error(`Export encountered errors`);}// Add an empty line to the console for the better readability.
 log('');if(telemetry){await telemetry.flush();}}
\ No newline at end of file
diff --git a/node_modules/next/dist/export/worker.js b/node_modules/next/dist/export/worker.js
index 2eb91fd..6e4ca20 100644
--- a/node_modules/next/dist/export/worker.js
+++ b/node_modules/next/dist/export/worker.js
@@ -1,4 +1,4 @@
-"use strict";exports.__esModule=true;exports.default=_default;var _mkdirp=_interopRequireDefault(require("mkdirp"));var _util=require("util");var _path=require("path");var _render=require("../next-server/server/render");var _fs=require("fs");var _amphtmlValidator=_interopRequireDefault(require("amphtml-validator"));var _loadComponents=require("../next-server/server/load-components");var _isDynamic=require("../next-server/lib/router/utils/is-dynamic");var _routeMatcher=require("../next-server/lib/router/utils/route-matcher");var _routeRegex=require("../next-server/lib/router/utils/route-regex");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const envConfig=require('../next-server/lib/runtime-config');const writeFileP=(0,_util.promisify)(_fs.writeFile);const mkdirp=(0,_util.promisify)(_mkdirp.default);const accessP=(0,_util.promisify)(_fs.access);global.__NEXT_DATA__={nextExport:true};async function _default({path,pathMap,distDir,buildId,outDir,sprDataDir,renderOpts,buildExport,serverRuntimeConfig,subFolders,serverless}){let results={ampValidations:[]};try{let{query={}}=pathMap;const{page}=pathMap;const filePath=path==='/'?'/index':path;const ampPath=`${filePath}.amp`;// Check if the page is a specified dynamic route
+"use strict";exports.__esModule=true;exports.default=_default;var _mkdirp=_interopRequireDefault(require("mkdirp"));var _util=require("util");var _path=require("path");var _render=require("../next-server/server/render");var _fs=require("fs");var _amphtmlValidator=_interopRequireDefault(require("amphtml-validator"));var _loadComponents=require("../next-server/server/load-components");var _isDynamic=require("../next-server/lib/router/utils/is-dynamic");var _routeMatcher=require("../next-server/lib/router/utils/route-matcher");var _routeRegex=require("../next-server/lib/router/utils/route-regex");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const envConfig=require('../next-server/lib/runtime-config');const writeFileP=(0,_util.promisify)(_fs.writeFile);const mkdirp=(0,_util.promisify)(_mkdirp.default);const accessP=(0,_util.promisify)(_fs.access);global.__NEXT_DATA__={nextExport:true};async function _default({path,pathMap,distDir,buildId,outDir,sprDataDir,renderOpts,buildExport,serverRuntimeConfig,subFolders,serverless,exportContextProviderModulePath}){if(exportContextProviderModulePath){const exportContext=require(exportContextProviderModulePath).exportContextProvider({outDir});global.__NEXT_EXPORT_CONTEXT__=exportContext;}let results={ampValidations:[]};try{let{query={}}=pathMap;const{page}=pathMap;const filePath=path==='/'?'/index':path;const ampPath=`${filePath}.amp`;// Check if the page is a specified dynamic route
 if((0,_isDynamic.isDynamicRoute)(page)&&page!==path){const params=(0,_routeMatcher.getRouteMatcher)((0,_routeRegex.getRouteRegex)(page))(path);if(params){query={...query,...params};}else{throw new Error(`The provided export path '${path}' doesn't match the '${page}' page.\nRead more: https://err.sh/zeit/next.js/export-path-mismatch`);}}const headerMocks={headers:{},getHeader:()=>({}),setHeader:()=>{},hasHeader:()=>false,removeHeader:()=>{},getHeaderNames:()=>[]};const req={url:path,...headerMocks};const res={...headerMocks};envConfig.setConfig({serverRuntimeConfig,publicRuntimeConfig:renderOpts.runtimeConfig});let htmlFilename=`${filePath}${_path.sep}index.html`;if(!subFolders)htmlFilename=`${filePath}.html`;const pageExt=(0,_path.extname)(page);const pathExt=(0,_path.extname)(path);// Make sure page isn't a folder with a dot in the name e.g. `v1.2`
 if(pageExt!==pathExt&&pathExt!==''){// If the path has an extension, use that as the filename instead
 htmlFilename=path;}else if(path==='/'){// If the path is the root, just use index.html
